<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd 
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<!-- 上面是对SpringMVC的一些约束声明，也必须要有 -->

	<!-- 配置Component扫描根路径 -->
	<!-- 扫描@Componet, @Controller, @Service, @Repositery -->
	<context:component-scan base-package="com.tigerz.*" />

	<!-- 设置访问静态资源 即静态资源直接直接访问，不需要路径映射 -->
	<mvc:default-servlet-handler />
	<!-- 跟上面方法一样，也是单独处理静态资源的，但是更灵活。 -->
	<!-- 注意前面是文件路径，后面url路径，这样多个资源目录对外就是一个资源目录了 -->
	<!-- <mvc:resources location="/,classpath:/META-INF/publicResources/" mapping="/resources/**"/> -->

	<!-- 注册RequestMappingHandlerMapping、RequestMappingHandlerAdapter两个映射类，还有一些类绑定 -->
	<!-- Mapping，Adapter 的注解器，就可以使用@RequestMapping, @Controller等注解,还有Json转换解析器 -->
	<!-- 增加一个自定义类型转换器，可以把字符串转成我们需要的时间格式 -->
	<mvc:annotation-driven conversion-service="conversionService"
		validator="validator" />
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器 String=>Date -->
		<property name="converters">
			<list>
				<bean class="com.tigerz.util.CustomDateConverter" />
			</list>
		</property>
	</bean>

	<!-- 视图解析器，所有返回的JSP页面逻辑名称将会按照规则寻找实际页面 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- 解决Post请求传参过程中的因编码产生的乱码问题 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
						</list>
					</property>
				</bean>
				<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
			</list>
		</property>
	</bean>

	<!-- Json转换的手动配置，有了driver设置，已经不需要了 -->
<!-- 	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jsonHttpMessageConverter" />
			</list>
		</property>
	</bean> -->

	<!-- 支持返回json(避免IE在ajax请求时，返回json出现下载 ) -->
<!-- 	<bean id="jsonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/json;charset=UTF-8</value>
			</list>
		</property>
	</bean> -->

	<!-- 注册防止跨站攻击的安全校验，暂时关闭 -->
	<!-- <bean id="csrfFilter" class="org.springframework.security.web.csrf.CsrfFilter"> 
		<constructor-arg> <bean class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository" 
		/> </constructor-arg> </bean> -->

	<!-- 传参错误校验器 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>

	<!-- 传参错误校验信息配置文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
				<value>classpath:CustomValidationMessages</value>
			</list>
		</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8" />
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>

	<!-- 注册全局异常处理器（只要实现HandlerExceptionResolver即可作为全局异常处理器） -->
	<bean class="com.tigerz.exception.CustomExceptionResolver"></bean>



</beans>